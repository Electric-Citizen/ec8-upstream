{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% extends "paragraph.html.twig" %}

{% set link = content.field_oc_link.0['#url'] %}



{#
{% set caption = content.field_oc_image[0]['#media'].field_caption.value %}
{% set imageUrl =  file_url(content.field_oc_image[0]['#media'].field_media_image.entity.fileuri) %}
#}

{% set alt = content.field_oc_image[0]['#media'].field_media_image.alt %}

{% set aria = content.field_oc_link.0['#title'] %}

{% set style = content.field_image_style[0]['#markup'] %}



{# Define image style based on picker #}
{% if (style == 'small') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'small') %}


{% elseif (style == 'medium') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'medium') %}


{% elseif (style == 'large') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'large') %}


{% elseif (style == 'full') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'full') %}


{% elseif (style == 'square') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'square') %}

{% elseif (style == 'banner') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'banner') %}


{% elseif (style == 'default') %}
{% set image =  drupal_entity('media', paragraph.field_oc_image.0.target_id, 'default') %}


{% endif %}



{% block widgetContent %}
	{{ content.field_widget_title }}
	<div class="wrapper oc-media {{style}}">
		{% if (content.field_oc_link.0|render) %}
			<a href="{{link}}" aria="Go to {{ aria }}">
				{{ image }}
			</a>
		{% else %}
			{{ image }}
		{% endif %}
	</div>
	{{ content.field_oc_long_text }}
	
{% endblock %}

